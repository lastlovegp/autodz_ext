using GMSDK;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MdTZ
{
    /// <summary>
    /// 超低反弹策略
    /// </summary>
    class Strategy_CDFD : Strategy
    {
      
        #region 成员变量
        //标的tick状态
        public Dictionary<string, TranBean> tranBeanDic = new Dictionary<string, TranBean>();

        //标的bar状态
        public Dictionary<string, BarTotal> barDic = new Dictionary<string, BarTotal>();

        //策略状态
        public StrateSta strateSta = new StrateSta();

        public StaUtilEx Util = new StaUtilEx();       
       
        #endregion    
         
        /// <summary>
        /// 收到tick事件，在这里添加策略逻辑。我们简单的每10个tick开仓/平仓，以最新价下单。
        /// </summary>
        /// <param name="tick"></param>
        public override void OnTick(Tick tick)
        {              
            //获取封装过的bean
            TranBean bean = Util.getTickTranBean(this, tick, tranBeanDic, strateSta);           
            //大盘指数的时候过滤掉
            if (bean == null)
            {
                return;
            }
            bean.gpTotal.minUnit = 1;
                                 
            //止损止益                     
            Position curPos = bean.position;
            bean.strong_sell_flag = Util.getIsStrongSellFlag(tick, barDic);
            //当日可以交易手数
            int can_tran_dw = Util.getCanTranDws(curPos);     

            //tick时间
            double btime = bean.btime;
            int sell_xh = 0;
          
            //本地仓库（数据库)           
            if (bean.positionDb != null)
            {
                sell_xh = bean.positionDb.inxh; 
                if (MdComm.str_mode == 4)
                {
                    can_tran_dw = bean.positionDb.can_tran_dw;
                    if (bean.positionDb.vwap > 0)
                    {
                        //盈亏率
                        bean.ykl = Math.Round((tick.last_price - bean.positionDb.vwap) / bean.positionDb.vwap * 100, 2);
                    }                    
                }                              
            }    
      
            //判断是否金叉
            bool isJC = JJUtil.crossOver(bean);
            if (isJC && bean.btime >= 9.45)
            {
                isJC = true;
                bean.xh_type = 1;
            }
            else
            {
                isJC = false;
            }

            //卖出信号
            if (can_tran_dw > 0 && tick.bid_p2 > 0 && bean.sell_cnt <= 2
                && !isJC)
            {                                                                                                             
                //兜底的止损止益--保险丝
                if ((bean.xh_flag == -1 && bean.btime >= 9.31)
                    || (
                    (bean.ykl >= RiskMng.getZyPrice(sell_xh)
                        && HGStaUtil.getTickZF(tick) <= 9.4
                        && bean.btime >= RiskMng.getSellTime(sell_xh))
                     || (bean.gp_time_qs != 1
                        && bean.ykl <= RiskMng.getZsPrice(sell_xh)
                        && bean.btime >= RiskMng.getSellTime(sell_xh))))
                {

                    //实盘交易
                    if (!HGStaUtil.isTraning && MdComm.str_mode == 2)
                    {
                        HGStaUtil.isTraning = true;
                        ZXApi.sellOut(tick.sec_id, THSAPI.PRICE_OPT_BUY_2, tick.bid_p2, THSAPI.NUM_OPT_ALL, 0);
                        HGStaUtil.isTraning = false;

                        //卖出交易
                        CloseLong(tick.exchange, tick.sec_id, tick.bid_p2, can_tran_dw * 100);                       
                    }

                    //导入1分钟BAR记录
                    if (MdComm.str_mode == 4)
                    {
                        JJUtil.loadGpBarList(tick.sec_id,-1, Convert.ToDateTime(tick.strtime).AddMinutes(-30).ToString()
                            , Convert.ToDateTime(tick.strtime).AddMinutes(30).ToString());
                    }

                    //卖出更新仓位                   
                    GPUtil.updatePosition(-1, tick.sec_id, sell_xh, can_tran_dw * 100, tick.bid_p2, Convert.ToDateTime(tick.strtime));

                    //本地库
                    bean.positionDb = GPUtil.getPositionDb(bean.code);

                    //头寸更新
                    strateSta.total_dws = strateSta.total_dws 
                        + Convert.ToInt16(Math.Round((can_tran_dw * 100 * bean.positionDb.vwap) / strateSta.dw_amt,0));
                   
                    Console.WriteLine("卖出: {0},时间 {1} 买入 {2} 价格 {3} 数量 {4} 盈亏率 {5} 信号 {6}",
                        tick.sec_id,
                        Convert.ToDateTime(tick.strtime).ToString(),
                         bean.positionDb.vwap, tick.bid_p2, can_tran_dw * 100, bean.ykl, sell_xh);

                    JJUtil.dblog(5, "卖出:" + tick.sec_id + "成本价 "
                        + bean.positionDb.vwap + ",价格:" + tick.bid_p2 + " 数量:" + can_tran_dw * 100 + ",信号" + sell_xh
                        ,Convert.ToDateTime(tick.strtime));
                  
                    //累计卖出次数
                    bean.sell_cnt++;
                }
            }

            //有买入信号        
            if (isJC
                || (bean.xh_flag == 1 && can_tran_dw == 0 && bean.sell_cnt == 0))
            {
                int today_buy_cnt = 1;
                if (isJC)
                {
                    today_buy_cnt = 2;
                }
                if (bean.buy_cnt < today_buy_cnt && tick.ask_p2 > 0)               
                {
                    //头寸数
                    int tc_num = 1;
                    //手数
                    bean.gpTotal.minUnit = RiskMng.getBuyDw(tick.last_price, strateSta.dw_amt, tc_num);
                    //金叉买入3个单位
                    if (bean.xh_type == GPConstants.XH_BUY_JCMR || bean.xh_type == GPConstants.XH_BUY_DBFT)
                    {
                        tc_num = 3;
                        bean.gpTotal.minUnit = RiskMng.getBuyDw(tick.last_price, strateSta.dw_amt, tc_num);
                    }

                    if (strateSta.total_dws - tc_num <0)
                    {
                        tc_num = strateSta.total_dws;
                        bean.gpTotal.minUnit = RiskMng.getBuyDw(tick.last_price, strateSta.dw_amt, tc_num);
                    }
                   
                    //之前有买入的就取消本次买入  
                    if (bean.xh_type != GPConstants.XH_BUY_JCMR)
                    {
                        bean.positionDb = GPUtil.getPositionDb(bean.code);
                        if (bean.positionDb != null 
                            && (bean.positionDb.available > 0 || strateSta.total_dws - tc_num < 0)                            
                            )
                        {
                            return;
                        } 
                    }

                    //头寸更新
                    strateSta.total_dws = strateSta.total_dws - tc_num < 0 ? strateSta.total_dws : (strateSta.total_dws - tc_num);                                                

                    Console.WriteLine("买入: {0},时间 {1} 价格 {2} 数量 {3} 信号 {4}",
                        tick.sec_id, Convert.ToDateTime(tick.strtime).ToString()
                        , tick.ask_p2, bean.gpTotal.minUnit * 100, bean.xh_type);

                    //实盘交易
                    if (!HGStaUtil.isTraning && MdComm.str_mode == 2)
                    {
                        HGStaUtil.isTraning = true;
                        ZXApi.buyIn(tick.sec_id, THSAPI.PRICE_OPT_SELL_2, tick.ask_p2, THSAPI.NUM_OPT_INPUT, bean.gpTotal.minUnit * 100);
                        HGStaUtil.isTraning = false;

                        //买入交易
                        OpenLong(tick.exchange, tick.sec_id, tick.ask_p2, bean.gpTotal.minUnit * 100);                                                
                    }

                    //买入更新仓位
                    GPUtil.updatePosition(1, tick.sec_id, bean.xh_type, bean.gpTotal.minUnit * 100, tick.ask_p2, Convert.ToDateTime(tick.strtime));

                    //导入1分钟BAR记录
                    if (MdComm.str_mode == 4)
                    {
                        JJUtil.loadGpBarList(tick.sec_id,1, Convert.ToDateTime(tick.strtime).AddMinutes(-30).ToString()
                            , Convert.ToDateTime(tick.strtime).AddMinutes(30).ToString());
                    }

                    bean.buy_cnt++;
                    //一次信号只买入一次
                    bean.xh_flag =0;

                    JJUtil.dblog(6, "买入:" + tick.sec_id + ",价格:" + tick.ask_p2 
                        + "数量:" + bean.gpTotal.minUnit * 100+",信号:"+bean.xh_type
                       , Convert.ToDateTime(tick.strtime));
                }                            

            }
                                         
        }

        /// <summary>
        /// 10点半以后
        /// 1,第 4,5条 bar 最高超过之前最高-> 买入
        /// 2,大于昨天
        /// </summary>
        /// <param name="bar"></param>
        public override void OnBar(Bar bar)
        {               

            //初始化信号
            Util.setXhFlag(bar, tranBeanDic,0);
            Util.setXhType(bar, tranBeanDic, 0);

            BarTotal total = HGStaUtil.getBarTotal(this, barDic, bar, strateSta);
            strateSta.dp_time_qs = 0;
            strateSta.dp_qs = 0;
            total.strong_buy_flag = false;
            total.strong_sell_flag = false;
            total.gp_time_qs = 0;

            TranBean bean = Util.getTickBean(bar,tranBeanDic);
            if (bean != null)
            {
                total.buy_cnt = bean.buy_cnt;
                total.sell_cnt = bean.sell_cnt;
            }

            //A, 大趋势判断,空头排列
            Util.updDpQs(total,this);
                       
            //1, 判断大盘分时趋势
            Util.updTodayTimeQs(total, bar, strateSta);

            //卖出信号
            if (HGStaUtil.DP_TICK_CODES.IndexOf(bar.sec_id) == -1)
            {
                if (JJUtil.crossUnder(total)) //死叉
                {
                    //上升中期
                    Util.setXhType(bar,tranBeanDic, GPConstants.XH_SELL_SCMC);
                    //买入信号
                    Util.setXhFlag(bar, tranBeanDic, - 1);
                            
                    if (total.buy_cnt == 0 && MdComm.str_mode != 4)
                    {
                        Console.WriteLine("死叉卖出信号 时间:{0} bar.code {1} jj5 {2} jj10 {3}",
                            Convert.ToDateTime(bar.strtime), bar.close, total.gpTotal.jj5, total.gpTotal.jj10);

                        //插入数据库日志
                        JJUtil.dblog(-1, "死叉卖出 code[" + bar.sec_id + "]", Convert.ToDateTime(bar.strtime));
                    }

                    return;     
                }                                                                             
            }
           
            //买入信号             
            if (HGStaUtil.DP_TICK_CODES.IndexOf(bar.sec_id) == -1  
                && bar.close > 0 && total.gpTotal.jj5 > 0 && total.gpTotal.jj30 > 0              
                && total.high > 0 && total.lastDailyBar.close > 0      
                && Math.Round(bar.close - total.high, 2) >= 0              
                )
            {               
                if (total.buy_cnt == 0 && MdComm.str_mode != 4)
                {
                    Console.WriteLine("买入信号 时间:{0} bar.code {1} jj5 {2} jj10 {3}",
                        Convert.ToDateTime(bar.strtime), bar.close, total.gpTotal.jj5, total.gpTotal.jj10);

                    //插入数据库日志
                    JJUtil.dblog(1, "买入信号 code[" + bar.sec_id + "]", Convert.ToDateTime(bar.strtime));
                }
               
                if (JJUtil.crossOver(total))
                {                
                    //金叉买入
                    Util.setXhType(bar, tranBeanDic,GPConstants.XH_BUY_JCMR);
                    //买入信号
                    Util.setXhFlag(bar,tranBeanDic, 1);
                }
                else if  (total.gpTotal.jj10 < total.gpTotal.jj5                    
                    && total.btime >= RiskMng.getBuyTime(GPConstants.XH_BUY_SSJJ))
                {
                    if (Math.Round(total.gpTotal.jj5 - total.gpTotal.jj10, 2)
                       - Math.Round(total.gpTotal.preGpTotal.jj5 - total.gpTotal.preGpTotal.jj10, 2)
                       > 0 && Math.Round(total.gpTotal.jj5 - total.gpTotal.jj10, 2) < total.gpTotal.jj5*0.02
                        && Math.Round(total.gpTotal.jj5 - total.gpTotal.jj10, 2) > total.gpTotal.jj5 * 0.009)
                    {
                        if (total.bar.close >= total.lastDailyBar.high)
                        {
                            //上升追击                            
                            Util.setXhType(bar,tranBeanDic, GPConstants.XH_BUY_SSJJ);                        
                            //买入信号
                            Util.setXhFlag(bar, tranBeanDic,1);
                        }
                       
                    }
                }
                else if (total.lastDailyBar.high < total.gpTotal.jj10
                    && bar.close < total.gpTotal.jj10
                    && total.gpTotal.jj10 > total.gpTotal.jj5
                    && total.btime >= RiskMng.getBuyTime(GPConstants.XH_BUY_DBFT))
                {
                    if (Math.Round(total.gpTotal.preGpTotal.jj10 - total.gpTotal.preGpTotal.jj5, 2)
                        -Math.Round(total.gpTotal.jj10 - total.gpTotal.jj5, 2) 
                        > 0)
                    {
                        if (total.bar.close >= total.lastDailyBar.high)
                        {
                            //底部反弹
                            Util.setXhType(bar,tranBeanDic, GPConstants.XH_BUY_DBFT);
                            //买入信号
                            Util.setXhFlag(bar, tranBeanDic, 1);
                        }
                                            
                    }
                }
                              
                return;               
            }
                              
                                    
        }

        #region 非主要事件

        /// <summary>
        /// 委托执行回报，订单的任何执行回报都会触发本事件，通过rpt可访问回报信息。
        /// </summary>
        /// <param name="rpt"></param>
        public override void OnExecRpt(ExecRpt rpt)
        {
            Console.WriteLine(
                "成交: 序号={0} price={1} amount={2} exec_type={3}",
                rpt.cl_ord_id,
                rpt.price,
                rpt.amount,
                rpt.exec_type);
        }


        /// <summary>
        /// 响应行情状态事件，收到MarketDataEvent数据后本函数被调用。
        /// 开盘，收盘，回放行情结束等事件
        /// </summary>
        /// <param name="bar"></param>
        public override void OnMdEvent(MDEvent md_event)
        {
            Console.WriteLine("event_type: {0}, utc_time: {1}", md_event.event_type, md_event.utc_time);

        }


        /// <summary>
        /// 错误处理，收到错误事件时，可以根据error_code判断是什么错误，然后进行处理。
        /// 以下示例实时行情/交易断线后，重新连接的过程。
        /// </summary>
        /// <param name="error_code"></param>
        public override void OnError(int error_code, string error_msg)
        {
            Console.WriteLine("on_error: {0}, msg: {1}, time: {2}", error_code, error_msg, DateTime.Now.ToString());

            //服务断开
            if ("3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,10000".IndexOf(error_code.ToString()) != -1)
            {
                MdComm.ERROR_CODE = error_code;
            }

        }
        #endregion


     
    }
}
