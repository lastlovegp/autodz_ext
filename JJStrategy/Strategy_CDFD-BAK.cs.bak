using GMSDK;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MdTZ
{
    /// <summary>
    /// 超低反弹策略
    /// </summary>
    class Strategy_CDFD_BAK : Strategy
    {
      
        #region 成员变量
        //标的tick状态
        public Dictionary<string, TranBean> tranBeanDic = new Dictionary<string, TranBean>();

        //标的bar状态
        public Dictionary<string, BarTotal> barDic = new Dictionary<string, BarTotal>();

        //策略状态
        public StrateSta strateSta = new StrateSta();      
       
        #endregion

        #region 私有方法

        /// <summary>
        ///  1: 买入 -1: 卖出 0:观望
        /// </summary>
        /// <param name="flag"></param>
        private void setXhFlag(Bar bar,int flag)
        {
            if (tranBeanDic.ContainsKey(bar.sec_id))
            {
                tranBeanDic[bar.sec_id].xh_flag = flag;
            }            
        }

        /// <summary>
        /// 信号类型
        /// </summary>
        /// <param name="type"></param>
        private void setXhType(Bar bar,int type)
        {
            if (tranBeanDic.ContainsKey(bar.sec_id))
            {
                tranBeanDic[bar.sec_id].xh_type = type;
            }   
        }

        /// <summary>
        /// 获取当日可交易单位数（手数)
        /// </summary>
        /// <param name="curPos"></param>
        /// <returns></returns>
        private int getCanTranDws(Position curPos)
        {
            int can_tran_dw = 0; //可以交易单位
            if (curPos != null)
            {
                can_tran_dw = Convert.ToInt16((curPos.available - curPos.available_today) / 100);
            }

            return can_tran_dw;
        }

        private TranBean getTickTranBean(Tick tick)
        {
            TranBean bean = null;
            //获取指标信息
            if (HGStaUtil.DP_TICK_CODES.IndexOf(tick.sec_id) == -1)
            {
                bean = HGStaUtil.getTranBean(this, tranBeanDic, tick, strateSta);
            }

            return bean;
        }
        private bool getIsStrongSellFlag(Tick tick)
        {
            bool flag = false;
            if (barDic.ContainsKey(tick.sec_id))
            {
                flag = barDic[tick.sec_id].strong_sell_flag;
            }

            return flag;

        }

        private TranBean getTickBean(Bar bar)
        {
            TranBean bean = null;
            //获取指标信息
            if (tranBeanDic.ContainsKey(bar.sec_id))
            {
                bean = tranBeanDic[bar.sec_id];
            }

            return bean;
        }

        /// <summary>
        /// 检查当天大盘分时趋势,10.20后的最高，最低比较
        /// </summary>
        /// <param name="total"></param>
        /// <param name="bar"></param>
        /// <param name="strateSta"></param>
        private void updTodayTimeQs(BarTotal total, Bar bar, StrateSta strateSta)
        {
            //判断大盘分时趋势
            double lowest_cg = Math.Abs(Math.Round(total.lastDailyBar.close - total.low, 2));
            double highest_cg = Math.Abs(Math.Round(total.high - total.lastDailyBar.close, 2));           
            if (
                highest_cg > lowest_cg &&
                JJUtil.getDTime(total.highest_time) > JJUtil.getDTime(total.lowest_time))
            {
                if (HGStaUtil.DP_TICK_CODES.IndexOf(bar.sec_id) != -1)
                {
                    //大盘分时强1， 2（高开调高)
                    strateSta.dp_time_qs = 1;
                }

                total.gp_time_qs = 1;
            }
            else if (
               highest_cg < lowest_cg &&
               JJUtil.getDTime(total.highest_time) < JJUtil.getDTime(total.lowest_time))
            {
                total.gp_time_qs = -1;

                if (HGStaUtil.DP_TICK_CODES.IndexOf(bar.sec_id) != -1)
                {
                    //大盘分时强1， 2（高开调高)
                    strateSta.dp_time_qs = -1;
                }

                if (total.seq % 30 == 0 && MdComm.str_mode != 4)
                {
                    Console.WriteLine("分时弱势：{0} 时间: {1}", total.strong_sell_flag, bar.strtime);
                }
            }
        }


        private void updDpQs(BarTotal total)
        {
            //A, 大趋势判断,空头排列
            this.strateSta.dp_qs = 0;           
            if (HGStaUtil.DP_TICK_CODES.IndexOf(total.code) != -1
                && total.gpTotal.jj5 < total.gpTotal.jj10
                && total.gpTotal.jj10 < total.gpTotal.jj20
                && total.gpTotal.jj20 < total.gpTotal.jj30)
            {
                this.strateSta.dp_qs = -1; //空头排列    
            
            } else if (total.gpTotal.jj5 < total.gpTotal.jj10
                && total.gpTotal.jj5 < total.gpTotal.jj20
                && total.gpTotal.jj5 < total.gpTotal.jj30)
            {
                total.strong_sell_flag = true;             
            }
            else if (HGStaUtil.DP_TICK_CODES.IndexOf(total.code) != -1
              && total.gpTotal.jj5 > total.gpTotal.jj10
              && total.gpTotal.jj5 > total.gpTotal.jj20)
            {
                this.strateSta.dp_qs = 1; //多头排列
            }
            else if (total.gpTotal.jj5 > total.gpTotal.jj10)
            {
                total.strong_buy_flag = true;               
            }

            //B, 美股大跌的话就不做了。
            if (HGStaUtil.DP_TICK_CODES.IndexOf(total.code) != -1 && this.strateSta.dp_qs != -5)
            {
                //这里参考下美股
                string mgzf = GPUtil.getMGZFStr();
                if (JJUtil.isMGContionDown(mgzf))
                {
                    Console.WriteLine("外围股市大跌，休息下吧。。。");

                    //插入数据库日志
                    JJUtil.dblog(-1, "外围股市大跌，休息下吧。。。", Convert.ToDateTime(total.strtime));

                    this.strateSta.dp_qs = -5; //美股大跌                    
                }
            }
        }

        /// <summary>
        /// bar 形态类型
        /// </summary>
        /// <param name="bar"></param>
        /// <returns></returns>
        private string getBarType(Bar bar) {

            string type = "";
            if (bar == null)
            {
                return type;
            }

            double z_cg = Math.Abs(bar.open - bar.close);

            if ((bar.close > bar.open) && (z_cg <= Math.Abs(bar.close - bar.high))
                || (bar.close < bar.open) && (z_cg <= Math.Abs(bar.open - bar.high)))
            {
                  type= "syx";
            }
            else if ((bar.close > bar.open) && (z_cg <= Math.Abs(bar.open - bar.low))
                || (bar.close < bar.open) && (z_cg <= Math.Abs(bar.close - bar.low)))
            {
                type = "xyx";
            }

            return type;
        }



        #endregion
         
        /// <summary>
        /// 收到tick事件，在这里添加策略逻辑。我们简单的每10个tick开仓/平仓，以最新价下单。
        /// </summary>
        /// <param name="tick"></param>
        public override void OnTick(Tick tick)
        {
            //获取封装过的bean
            TranBean bean = getTickTranBean(tick);           
            //大盘指数的时候过滤掉
            if (bean == null)
            {
                return;
            }
            bean.gpTotal.minUnit = 1;
                                 
            //止损止益                     
            Position curPos = bean.position;
            bean.strong_sell_flag = getIsStrongSellFlag(tick);
            //当日可以交易手数
            int can_tran_dw = getCanTranDws(curPos);     

            //tick时间
            double btime = bean.btime;           
          
            //本地仓库（数据库)           
            if (bean.positionDb != null)
            {
                bean.xh_type = bean.positionDb.inxh;
                if (MdComm.str_mode == 4)
                {
                    can_tran_dw = bean.positionDb.can_tran_dw;
                    if (bean.positionDb.vwap > 0)
                    {
                        bean.ykl = Math.Round((tick.last_price - bean.positionDb.vwap) / bean.positionDb.vwap * 100, 2);
                    }                    
                }                              
            }

            //卖出信号
            if (can_tran_dw > 0 && tick.bid_p2 > 0 && bean.sell_cnt <= 2)
            {                                                                                                                 
                //兜底的止损止益--保险丝
                if (                    
                    (bean.ykl >= RiskMng.getZyPrice(bean.xh_type)
                        && HGStaUtil.getTickZF(tick) <= 9.4
                        && bean.btime >= RiskMng.getSellTime(bean.xh_type, strateSta.dp_time_qs, 1))
                     || (bean.ykl <= RiskMng.getZsPrice(bean.xh_type) 
                        && bean.zf < 0 
                        && strateSta.dp_time_qs != 1
                        && bean.btime >= RiskMng.getSellTime(bean.xh_type, strateSta.dp_time_qs, -1))                     
                 )
                {
                    //实盘交易
                    if (!HGStaUtil.isTraning && MdComm.str_mode == 2)
                    {
                        HGStaUtil.isTraning = true;
                        ZXApi.sellOut(tick.sec_id, THSAPI.PRICE_OPT_BUY_2, tick.bid_p2, THSAPI.NUM_OPT_ALL, 0);
                        HGStaUtil.isTraning = false;

                        //卖出交易
                        CloseLong(tick.exchange, tick.sec_id, tick.bid_p2, can_tran_dw * 100);                       
                    }

                    //卖出更新仓位                   
                    GPUtil.updatePosition(-1, tick.sec_id, bean.xh_type, can_tran_dw * 100, tick.bid_p2, Convert.ToDateTime(tick.strtime));

                    //本地库
                    bean.positionDb = GPUtil.getPositionDb(bean.code);

                    //头寸更新
                    strateSta.total_dws = strateSta.total_dws 
                        + Convert.ToInt16(Math.Round((can_tran_dw * 100 * bean.positionDb.vwap) / strateSta.dw_amt,0));
                   
                    Console.WriteLine("卖出: {0},时间 {1} 买入 {2} 价格 {3} 数量 {4} 盈亏率 {5} 信号 {6}",
                        tick.sec_id,
                        Convert.ToDateTime(tick.strtime).ToString(),
                         bean.positionDb.vwap, tick.bid_p2, can_tran_dw * 100, bean.ykl, bean.xh_type);

                    JJUtil.dblog(5, "卖出:" + tick.sec_id + "成本价 " 
                        + bean.positionDb.vwap + ",价格:" + tick.bid_p2 + " 数量:" + can_tran_dw * 100 + ",信号" + bean.xh_type
                        ,Convert.ToDateTime(tick.strtime));
                       
                    //累计卖出次数
                    bean.sell_cnt++;
                }
            }

            //有买入信号        
            if (bean.xh_flag == 1 && can_tran_dw == 0 && bean.sell_cnt == 0)
            {
               
                if (bean.buy_cnt < 1 && tick.ask_p2 > 0)               
                {
                    //头寸数
                    int tc_num = 1;
                    bean.gpTotal.minUnit = RiskMng.getBuyDw(tick.last_price, strateSta.dw_amt, tc_num);
                    //底部反弹的时候买入3个单位
                    if (bean.xh_type == GPConstants.XH_TYPE_DBFT)
                    {
                        tc_num = 2;
                        bean.gpTotal.minUnit = RiskMng.getBuyDw(tick.last_price, strateSta.dw_amt, tc_num);
                    }

                    if (strateSta.total_dws == 1)
                    {
                        tc_num = 1;
                    }

                    //之前有买入的就取消本次买入                    
                    bean.positionDb = GPUtil.getPositionDb(bean.code);
                    if ((bean.positionDb != null && bean.positionDb.available > 0) || strateSta.total_dws - tc_num < 0)
                    {
                        return;
                    }   

                    //头寸更新
                    strateSta.total_dws = strateSta.total_dws - tc_num <0 ?strateSta.total_dws:(strateSta.total_dws - tc_num);                 
                                  

                    Console.WriteLine("买入: {0},时间 {1} 价格 {2} 数量 {3} 信号 {4}",
                        tick.sec_id, Convert.ToDateTime(tick.strtime).ToString()
                        , tick.ask_p2, bean.gpTotal.minUnit * 100, bean.xh_type);

                    //实盘交易
                    if (!HGStaUtil.isTraning && MdComm.str_mode == 2)
                    {
                        HGStaUtil.isTraning = true;
                        ZXApi.buyIn(tick.sec_id, THSAPI.PRICE_OPT_SELL_2, tick.ask_p2, THSAPI.NUM_OPT_INPUT, bean.gpTotal.minUnit * 100);
                        HGStaUtil.isTraning = false;

                        //买入交易
                        OpenLong(tick.exchange, tick.sec_id, tick.ask_p2, bean.gpTotal.minUnit * 100);                                                
                    }

                    //买入更新仓位
                    GPUtil.updatePosition(1, tick.sec_id, bean.xh_type, bean.gpTotal.minUnit * 100, tick.ask_p2, Convert.ToDateTime(tick.strtime));                   

                    bean.buy_cnt++;
                    //一次信号只买入一次
                    bean.xh_flag =0;

                    JJUtil.dblog(6, "买入:" + tick.sec_id + ",价格:" + tick.ask_p2 
                        + "数量:" + bean.gpTotal.minUnit * 100+",信号:"+bean.xh_type
                       , Convert.ToDateTime(tick.strtime));
                }                            

            }
                                         
        }



        /// <summary>
        /// 10点半以后
        /// 1,第 4,5条 bar 最高超过之前最高-> 买入
        /// 2,大于昨天
        /// </summary>
        /// <param name="bar"></param>
        public override void OnBar(Bar bar)
        {               

            //初始化信号
            setXhFlag(bar,0);
            setXhType(bar,0);

            BarTotal total = HGStaUtil.getBarTotal(this, barDic, bar, strateSta);
            strateSta.dp_time_qs = 0;
            strateSta.dp_qs = 0;
            total.strong_buy_flag = false;
            total.strong_sell_flag = false;
            total.gp_time_qs = 0;

            TranBean bean = getTickBean(bar);
            if (bean != null)
            {
                total.buy_cnt = bean.buy_cnt;
                total.sell_cnt = bean.sell_cnt;
            }

            //A, 大趋势判断,空头排列
            updDpQs(total);
                       
            //1, 判断大盘分时趋势
            updTodayTimeQs(total, bar, strateSta);


            //多头趋势
            if (HGStaUtil.DP_TICK_CODES.IndexOf(bar.sec_id) == -1
                && Math.Round(total.lastDailyBar.close - total.gpTotal.jj5, 2) >= 0
                && Math.Round(bar.close - total.high, 2) >= 0
                && (HGStaUtil.getBarZF(total.lastDailyBar) > -9 && HGStaUtil.getBarZF(total.lastDailyBar) <= 2))
            {
                //过滤掉噪音
                if (total.btime >= 9.45 && total.gp_time_qs == 1)
                {   
                
                    //下跌初期的时候10.30 后发出信号
                    if (total.gpTotal.top_5_day > bar.close && total.gpTotal.top_5_day_date <= Convert.ToDateTime(bar.strtime))
                    {
                        if (total.btime < 14.30)
                        {
                            return;
                        }
                    }

                    //买入信号
                    setXhFlag(bar, 1);
                  
                    if (total.gpTotal.jj5 > total.gpTotal.jj10)
                    {
                        //上升中期
                        setXhType(bar, GPConstants.XH_TYPE_SSZQ);
                    }
                    else
                    {
                        //上升初期
                        setXhType(bar, GPConstants.XH_TYPE_SSCQ);
                    }

                    if (total.buy_cnt == 0 && MdComm.str_mode != 4)
                    {
                        Console.WriteLine("多头趋势追击信号 时间:{0} bar.code {1} total.high {2} jj5 {3}",
                            bar.strtime, bar.close, total.code, total.gpTotal.jj5);

                        //插入数据库日志
                        JJUtil.dblog(1, "多头趋势追击信号 code[" + bar.sec_id + "]", Convert.ToDateTime(bar.strtime));
                    }

                    return;
                }
            }


            //2,   5日均线下超低反弹信号开始              
            if (HGStaUtil.DP_TICK_CODES.IndexOf(bar.sec_id) == -1
                //&& this.strateSta.dp_qs != -5
                && bar.close > 0 && total.gpTotal.jj5 > 0 && total.gpTotal.jj30 > 0
                && total.high > 0 && total.lastDailyBar.close > 0                
                && Math.Round(total.lastDailyBar.close - total.gpTotal.jj5, 2) < 0
                && Math.Round(bar.close - total.high, 2) >= 0                              
                )
            {
                double b_time = 9.45;                              

                //过滤掉噪音
                if (total.btime >= b_time && total.gp_time_qs == 1)
                {
                    if (total.buy_cnt == 0 && MdComm.str_mode != 4)
                    {
                        Console.WriteLine("超低反弹信号 时间:{0} bar.code {1} total.high {2} jj5 {3}",
                            bar.strtime, bar.close, total.code, total.gpTotal.jj5);

                        //插入数据库日志
                        JJUtil.dblog(1, "超低反弹信号 code[" + bar.sec_id + "]", Convert.ToDateTime(bar.strtime));
                    }

                   
                  
                    if (total.gpTotal.jj5 > total.gpTotal.jj10)
                    {                      
                        //高位反弹
                        setXhType(bar, GPConstants.XH_TYPE_GWFT);                      
                    }
                    else
                    {

                        //下跌初期的时候10.30 后发出信号
                        if (total.gpTotal.top_5_day > bar.close && total.gpTotal.top_5_day_date <= Convert.ToDateTime(bar.strtime))
                        {
                            if (bar.close < total.lastDailyBar.high)
                            {
                                return;
                            }
                        }

                        //低位反弹
                        setXhType(bar, GPConstants.XH_TYPE_DBFT);
                    }

                    //买入信号
                    setXhFlag(bar, 1);

                    return;
                }
            }
                              
                                    
        }



        #region 非主要事件

        /// <summary>
        /// 委托执行回报，订单的任何执行回报都会触发本事件，通过rpt可访问回报信息。
        /// </summary>
        /// <param name="rpt"></param>
        public override void OnExecRpt(ExecRpt rpt)
        {
            Console.WriteLine(
                "成交: 序号={0} price={1} amount={2} exec_type={3}",
                rpt.cl_ord_id,
                rpt.price,
                rpt.amount,
                rpt.exec_type);
        }


        /// <summary>
        /// 响应行情状态事件，收到MarketDataEvent数据后本函数被调用。
        /// 开盘，收盘，回放行情结束等事件
        /// </summary>
        /// <param name="bar"></param>
        public override void OnMdEvent(MDEvent md_event)
        {
            Console.WriteLine("event_type: {0}, utc_time: {1}", md_event.event_type, md_event.utc_time);

        }


        /// <summary>
        /// 错误处理，收到错误事件时，可以根据error_code判断是什么错误，然后进行处理。
        /// 以下示例实时行情/交易断线后，重新连接的过程。
        /// </summary>
        /// <param name="error_code"></param>
        public override void OnError(int error_code, string error_msg)
        {
            Console.WriteLine("on_error: {0}, msg: {1}, time: {2}", error_code, error_msg, DateTime.Now.ToString());

            //服务断开
            if ("3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,10000".IndexOf(error_code.ToString()) != -1)
            {
                MdComm.ERROR_CODE = error_code;
            }

        }
        #endregion


     
    }
}
